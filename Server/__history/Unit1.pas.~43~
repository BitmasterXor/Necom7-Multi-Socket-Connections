unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Classes, Vcl.Forms,
  Vcl.ComCtrls, ncSockets, ncSources, ncSocketList, Vcl.Controls, Vcl.Menus;

type
  TConnectedUserData = class
    Line: TncLine;
    ID: string;
  end;

type
  TForm1 = class(TForm)
    StatusBar1: TStatusBar;
    ListView1: TListView;
    serversocket: TncServerSource;
    PopupMenu1: TPopupMenu;
    S1: TMenuItem;
    S2: TMenuItem;
    procedure FormCreate(Sender: TObject);
    procedure ServerSocketConnected(Sender: TObject; aLine: TncLine);
    procedure ServerSocketDisconnected(Sender: TObject; aLine: TncLine);
    function serversocketHandleCommand(Sender: TObject; aLine: TncLine;
      aCmd: Integer; const aData: TBytes; aRequiresResult: Boolean;
      const aSenderComponent, aReceiverComponent: string): TBytes;
    procedure S1Click(Sender: TObject);
    procedure S2Click(Sender: TObject);
  private
    connectedclients: Integer;
    ConnectedUsers: Tstringlist;
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure SendToAllClients(const Msg: string);
var
  I: Integer;
  SocketList: TSocketList;
begin
  SocketList := Form1.serversocket.Lines.LockList;
  try
    for I := 0 to SocketList.Count - 1 do
    begin
      Form1.serversocket.ExecCommand(SocketList.Lines[I], 0, BytesOf(Msg), False);
    end;
  finally
    Form1.serversocket.Lines.UnlockList;
  end;
end;

procedure SendToSelectedClient(const Msg: string);
var
  I: Integer;
  NickName: string;
  UserData: TConnectedUserData;
begin
  if Form1.ListView1.Selected <> nil then
  begin
    NickName := Form1.ListView1.Selected.SubItems[0];
    for I := 0 to Form1.ConnectedUsers.Count - 1 do
    begin
      UserData := TConnectedUserData(Form1.ConnectedUsers.Objects[I]);
      if UserData.ID = NickName then
      begin
        Form1.serversocket.ExecCommand(UserData.Line, 0, BytesOf(Msg), False);
        Exit;
      end;
    end;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  ConnectedUsers := Tstringlist.Create;
  connectedclients := 0;
  serversocket.Port:=3434;
  serversocket.Active := True;
  StatusBar1.Panels[0].Text := 'Status: Active';
end;

procedure TForm1.S1Click(Sender: TObject);
begin
SendToAllClients('Hello ALL');
end;

procedure TForm1.S2Click(Sender: TObject);
begin
 SendToSelectedClient('MSG JUST TO YOU!');
end;

procedure TForm1.ServerSocketConnected(Sender: TObject; aLine: TncLine);
begin
  Inc(connectedclients);
  StatusBar1.Panels[1].Text := 'Connections: ' + IntToStr(connectedclients);
end;

procedure TForm1.ServerSocketDisconnected(Sender: TObject; aLine: TncLine);
var
  I: Integer;
  UserData: TConnectedUserData;
  li: TListItem;
  clientid: string;
begin
  clientid := '';

  // Find the disconnected client in ConnectedUsers list
  for I := 0 to ConnectedUsers.Count - 1 do
  begin
    UserData := TConnectedUserData(ConnectedUsers.Objects[I]);
    if UserData.Line = aLine then
    begin
      clientid := UserData.ID;
      UserData.Free; // Free memory
      ConnectedUsers.Delete(I);
      Break;
    end;
  end;

  // Remove the disconnected client from ListView1
  for I := ListView1.Items.Count - 1 downto 0 do
  begin
    li := ListView1.Items[I];
    if li.SubItems[1] = clientid then
    begin
      li.Delete;
      Break;
    end;
  end;

  // Update the connections count
  Dec(connectedclients);
  StatusBar1.Panels[1].Text := 'Connections: ' + IntToStr(connectedclients);
end;



function TForm1.serversocketHandleCommand(Sender: TObject; aLine: TncLine;
  aCmd: Integer; const aData: TBytes; aRequiresResult: Boolean;
  const aSenderComponent, aReceiverComponent: string): TBytes;
var
  datarecieved: String;
  UserData: TConnectedUserData;
  sl: Tstringlist;
  li: Tlistitem;
begin
  datarecieved := stringof(aData);
  sl := Tstringlist.Create;
  try
    sl.Delimiter := '|';
    sl.StrictDelimiter := True;
    sl.DelimitedText := datarecieved;

    if sl.Count > 0 then // Check if the list has items
    begin
      if sl[0] = 'NewCon' then
      begin
        UserData := TConnectedUserData.Create;
        UserData.Line := aLine;
        UserData.ID := sl[1];
        ConnectedUsers.AddObject(sl[1], UserData);
        li := ListView1.Items.Add;
        li.Caption := aLine.PeerIP;
        li.SubItems.Add(sl[1]);
      end;
    end;
  finally
    sl.Free;
  end;
end;



end.

